/* global $n $jupiters $bounce $infinite $slide $stick $wrap $tracks */

const DEFAULT_EDGE = $slide.value

export class Controls {
  constructor () {
    this.setLogN(2)
    this.setLogJupiters(2)
    this.setEdge(DEFAULT_EDGE)
    this.setTracks('off')
    for (const param of document.location.search.split(/[?&]/)) {
      const [name, value] = param.split(/=/)
      switch (name) {
        case 'n':
          this.setLogN(value)
          $n.control.value = value
          break
        case 'jupiters':
          this.setLogJupiters(value)
          $jupiters.control.value = value
          break
        case 'edge':
          this.setEdge(value)
          document.getElementById('$' + value).checked = true
          break
        case 'tracks':
          this.setTracks(value)
          $tracks.control.checked = this.tracks
          break
        case '':
          // Ignore. Generated bys split
          break
        default:
          console.error(`Unknown parameter "${name}=${value}"`)
          break
      }
    }
    $n.control.onchange = () => this.setLogN($n.control.value)
    $jupiters.control.onchange = () => this.setLogJupiters($jupiters.control.value)
    const onEdge = () => {
      this.setEdge($bounce.checked
        ? $bounce.value
        : (
            $infinite.checked
              ? $infinite.value
              : (
                  $slide.checked
                    ? $slide.value
                    : (
                        $stick.checked
                          ? $stick.value
                          : (
                              $wrap.checked
                                ? $wrap.value
                                : (
                                    'unknown-control'
                                  )
                            )
                      )
                )
          ))
    }
    $bounce.onchange = onEdge
    $infinite.onchange = onEdge
    $slide.onchange = onEdge
    $stick.onchange = onEdge
    $wrap.onchange = onEdge
    $tracks.onchange = () => this.setEdge($tracks.checked ? 'on' : 'off')
  }

  setLogN (logN) {
    this.n = Math.round(10 ** Number(logN))
    $n.innerText = `Initially ${this.n} planets`
  }

  setLogJupiters (jupiters) {
    this.jupiters = 10 ** Number(jupiters)
    $jupiters.innerText = `each of size ${Math.round(this.jupiters)} jupiters`
  }

  setEdge (edge) {
    this.bounce = false
    this.infinite = false
    this.slide = false
    this.stick = false
    this.wrap = false
    switch (edge) {
      case $bounce.value:
        this.bounce = true
        break
      case $infinite.value:
        this.infinite = true
        break
      case $slide.value:
        this.slide = true
        break
      case $stick.value:
        this.stick = true
        break
      case $wrap.value:
        this.wrap = true
        break
      default:
        console.error(`Unknown edge value "${edge}"`)
        break
    }
  }

  setTracks (tracks) {
    this.tracks = (tracks === 'on')
  }
}
